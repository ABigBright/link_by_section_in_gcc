
a.out:     file format elf64-x86-64
a.out
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x0000000000001040

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000002d8 memsz 0x00000000000002d8 flags r--
  INTERP off    0x0000000000000318 vaddr 0x0000000000000318 paddr 0x0000000000000318 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x0000000000000658 memsz 0x0000000000000658 flags r--
    LOAD off    0x0000000000001000 vaddr 0x0000000000001000 paddr 0x0000000000001000 align 2**12
         filesz 0x000000000000020d memsz 0x000000000000020d flags r-x
    LOAD off    0x0000000000002000 vaddr 0x0000000000002000 paddr 0x0000000000002000 align 2**12
         filesz 0x000000000000016c memsz 0x000000000000016c flags r--
    LOAD off    0x0000000000002de8 vaddr 0x0000000000003de8 paddr 0x0000000000003de8 align 2**12
         filesz 0x0000000000000248 memsz 0x0000000000000250 flags rw-
 DYNAMIC off    0x0000000000002df8 vaddr 0x0000000000003df8 paddr 0x0000000000003df8 align 2**3
         filesz 0x00000000000001e0 memsz 0x00000000000001e0 flags rw-
    NOTE off    0x0000000000000338 vaddr 0x0000000000000338 paddr 0x0000000000000338 align 2**3
         filesz 0x0000000000000040 memsz 0x0000000000000040 flags r--
    NOTE off    0x0000000000000378 vaddr 0x0000000000000378 paddr 0x0000000000000378 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
0x6474e553 off    0x0000000000000338 vaddr 0x0000000000000338 paddr 0x0000000000000338 align 2**3
         filesz 0x0000000000000040 memsz 0x0000000000000040 flags r--
EH_FRAME off    0x0000000000002028 vaddr 0x0000000000002028 paddr 0x0000000000002028 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000002de8 vaddr 0x0000000000003de8 paddr 0x0000000000003de8 align 2**0
         filesz 0x0000000000000218 memsz 0x0000000000000218 flags r--

Dynamic Section:
  NEEDED               libc.so.6
  INIT                 0x0000000000001000
  FINI                 0x0000000000001200
  INIT_ARRAY           0x0000000000003de8
  INIT_ARRAYSZ         0x0000000000000008
  FINI_ARRAY           0x0000000000003df0
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x00000000000003c0
  STRTAB               0x00000000000004a8
  SYMTAB               0x00000000000003e8
  STRSZ                0x0000000000000095
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000004000
  PLTRELSZ             0x0000000000000018
  PLTREL               0x0000000000000007
  JMPREL               0x0000000000000640
  RELA                 0x0000000000000580
  RELASZ               0x00000000000000c0
  RELAENT              0x0000000000000018
  FLAGS_1              0x0000000008000000
  VERNEED              0x0000000000000550
  VERNEEDNUM           0x0000000000000001
  VERSYM               0x000000000000053e
  RELACOUNT            0x0000000000000003

Version References:
  required from libc.so.6:
    0x09691a75 0x00 03 GLIBC_2.2.5
    0x069691b4 0x00 02 GLIBC_2.34

Sections:
Idx Name               Size      VMA               LMA               File off  Algn  Flags
  0 .interp            0000001c  0000000000000318  0000000000000318  00000318  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000040  0000000000000338  0000000000000338  00000338  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000378  0000000000000378  00000378  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag      00000020  000000000000039c  000000000000039c  0000039c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash          00000024  00000000000003c0  00000000000003c0  000003c0  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym            000000c0  00000000000003e8  00000000000003e8  000003e8  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr            00000095  00000000000004a8  00000000000004a8  000004a8  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version       00000010  000000000000053e  000000000000053e  0000053e  2**1  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r     00000030  0000000000000550  0000000000000550  00000550  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn          000000c0  0000000000000580  0000000000000580  00000580  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt          00000018  0000000000000640  0000000000000640  00000640  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init              0000001b  0000000000001000  0000000000001000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt               00000020  0000000000001020  0000000000001020  00001020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text              000001bd  0000000000001040  0000000000001040  00001040  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .fini              0000000d  0000000000001200  0000000000001200  00001200  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata            00000027  0000000000002000  0000000000002000  00002000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame_hdr      00000044  0000000000002028  0000000000002028  00002028  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .eh_frame          000000fc  0000000000002070  0000000000002070  00002070  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array        00000008  0000000000003de8  0000000000003de8  00002de8  2**3  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array        00000008  0000000000003df0  0000000000003df0  00002df0  2**3  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic           000001e0  0000000000003df8  0000000000003df8  00002df8  2**3  CONTENTS, ALLOC, LOAD, DATA
 21 .got               00000028  0000000000003fd8  0000000000003fd8  00002fd8  2**3  CONTENTS, ALLOC, LOAD, DATA
 22 .got.plt           00000020  0000000000004000  0000000000004000  00003000  2**3  CONTENTS, ALLOC, LOAD, DATA
 23 .data              00000010  0000000000004020  0000000000004020  00003020  2**3  CONTENTS, ALLOC, LOAD, DATA
 24 .bss               00000008  0000000000004030  0000000000004030  00003030  2**0  ALLOC
 25 .comment           00000024  0000000000000000  0000000000000000  00003030  2**0  CONTENTS, READONLY
 26 .debug_aranges     00000030  0000000000000000  0000000000000000  00003054  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_info        000000d0  0000000000000000  0000000000000000  00003084  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_abbrev      00000083  0000000000000000  0000000000000000  00003154  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line        00000065  0000000000000000  0000000000000000  000031d7  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_str         0000008c  0000000000000000  0000000000000000  0000323c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str    00000026  0000000000000000  0000000000000000  000032c8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000              abi-note.c
000000000000039c l     O .note.ABI-tag	0000000000000020              __abi_tag
0000000000000000 l    df *ABS*	0000000000000000              init.c
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000001070 l     F .text	0000000000000000              deregister_tm_clones
00000000000010a0 l     F .text	0000000000000000              register_tm_clones
00000000000010e0 l     F .text	0000000000000000              __do_global_dtors_aux
0000000000004030 l     O .bss	0000000000000001              completed.0
0000000000003df0 l     O .fini_array	0000000000000000              __do_global_dtors_aux_fini_array_entry
0000000000001130 l     F .text	0000000000000000              frame_dummy
0000000000003de8 l     O .init_array	0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000              main.c
0000000000000000 l    df *ABS*	0000000000000000              libd.c
000000000000200c l     O .rodata	0000000000000006              __FUNCTION__.1
0000000000002012 l     O .rodata	0000000000000007              __FUNCTION__.0
0000000000000000 l    df *ABS*	0000000000000000              liba.c
0000000000002021 l     O .rodata	0000000000000006              __FUNCTION__.0
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000002168 l     O .eh_frame	0000000000000000              __FRAME_END__
0000000000000000 l    df *ABS*	0000000000000000              
0000000000003df8 l     O .dynamic	0000000000000000              _DYNAMIC
0000000000002028 l       .eh_frame_hdr	0000000000000000              __GNU_EH_FRAME_HDR
0000000000004000 l     O .got.plt	0000000000000000              _GLOBAL_OFFSET_TABLE_
0000000000001139 g     F .text	0000000000000007              raise
0000000000000000       F *UND*	0000000000000000              __libc_start_main@GLIBC_2.34
0000000000000000  w      *UND*	0000000000000000              _ITM_deregisterTMCloneTable
0000000000004020  w      .data	0000000000000000              data_start
00000000000011a4 g     F .text	000000000000002f              _libok
0000000000004030 g       .data	0000000000000000              _edata
0000000000001200 g     F .fini	0000000000000000              .hidden _fini
0000000000000000       F *UND*	0000000000000000              printf@GLIBC_2.2.5
0000000000004020 g       .data	0000000000000000              __data_start
0000000000000000  w      *UND*	0000000000000000              __gmon_start__
0000000000004028 g     O .data	0000000000000000              .hidden __dso_handle
0000000000002000 g     O .rodata	0000000000000004              _IO_stdin_used
000000000000117a g     F .text	000000000000002a              _libd
0000000000004038 g       .bss	0000000000000000              _end
0000000000001040 g     F .text	0000000000000026              _start
0000000000004030 g       .bss	0000000000000000              __bss_start
0000000000001140 g     F .text	000000000000003a              main
0000000000004030 g     O .data	0000000000000000              .hidden __TMC_END__
0000000000000000  w      *UND*	0000000000000000              _ITM_registerTMCloneTable
00000000000011d3 g     F .text	000000000000002a              _liba
0000000000000000  w    F *UND*	0000000000000000              __cxa_finalize@GLIBC_2.2.5
0000000000001000 g     F .init	0000000000000000              .hidden _init



Disassembly of section .init:

0000000000001000 <_init>:
_init():
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <printf@plt-0x10>:
    1020:	ff 35 e2 2f 00 00    	push   0x2fe2(%rip)        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmp    *0x2fe4(%rip)        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001030 <printf@plt>:
    1030:	ff 25 e2 2f 00 00    	jmp    *0x2fe2(%rip)        # 4018 <printf@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	push   $0x0
    103b:	e9 e0 ff ff ff       	jmp    1020 <_init+0x20>

Disassembly of section .text:

0000000000001040 <_start>:
_start():
    1040:	f3 0f 1e fa          	endbr64 
    1044:	31 ed                	xor    %ebp,%ebp
    1046:	49 89 d1             	mov    %rdx,%r9
    1049:	5e                   	pop    %rsi
    104a:	48 89 e2             	mov    %rsp,%rdx
    104d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1051:	50                   	push   %rax
    1052:	54                   	push   %rsp
    1053:	45 31 c0             	xor    %r8d,%r8d
    1056:	31 c9                	xor    %ecx,%ecx
    1058:	48 8d 3d e1 00 00 00 	lea    0xe1(%rip),%rdi        # 1140 <main>
    105f:	ff 15 73 2f 00 00    	call   *0x2f73(%rip)        # 3fd8 <__libc_start_main@GLIBC_2.34>
    1065:	f4                   	hlt    
    1066:	66 2e 0f 1f 84 00 00 00 00 00 	cs nopw 0x0(%rax,%rax,1)

0000000000001070 <deregister_tm_clones>:
deregister_tm_clones():
    1070:	48 8d 3d b9 2f 00 00 	lea    0x2fb9(%rip),%rdi        # 4030 <__TMC_END__>
    1077:	48 8d 05 b2 2f 00 00 	lea    0x2fb2(%rip),%rax        # 4030 <__TMC_END__>
    107e:	48 39 f8             	cmp    %rdi,%rax
    1081:	74 15                	je     1098 <deregister_tm_clones+0x28>
    1083:	48 8b 05 56 2f 00 00 	mov    0x2f56(%rip),%rax        # 3fe0 <_ITM_deregisterTMCloneTable>
    108a:	48 85 c0             	test   %rax,%rax
    108d:	74 09                	je     1098 <deregister_tm_clones+0x28>
    108f:	ff e0                	jmp    *%rax
    1091:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1098:	c3                   	ret    
    1099:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000010a0 <register_tm_clones>:
register_tm_clones():
    10a0:	48 8d 3d 89 2f 00 00 	lea    0x2f89(%rip),%rdi        # 4030 <__TMC_END__>
    10a7:	48 8d 35 82 2f 00 00 	lea    0x2f82(%rip),%rsi        # 4030 <__TMC_END__>
    10ae:	48 29 fe             	sub    %rdi,%rsi
    10b1:	48 89 f0             	mov    %rsi,%rax
    10b4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    10b8:	48 c1 f8 03          	sar    $0x3,%rax
    10bc:	48 01 c6             	add    %rax,%rsi
    10bf:	48 d1 fe             	sar    %rsi
    10c2:	74 14                	je     10d8 <register_tm_clones+0x38>
    10c4:	48 8b 05 25 2f 00 00 	mov    0x2f25(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    10cb:	48 85 c0             	test   %rax,%rax
    10ce:	74 08                	je     10d8 <register_tm_clones+0x38>
    10d0:	ff e0                	jmp    *%rax
    10d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    10d8:	c3                   	ret    
    10d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000010e0 <__do_global_dtors_aux>:
__do_global_dtors_aux():
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	80 3d 45 2f 00 00 00 	cmpb   $0x0,0x2f45(%rip)        # 4030 <__TMC_END__>
    10eb:	75 33                	jne    1120 <__do_global_dtors_aux+0x40>
    10ed:	55                   	push   %rbp
    10ee:	48 83 3d 02 2f 00 00 00 	cmpq   $0x0,0x2f02(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    10f6:	48 89 e5             	mov    %rsp,%rbp
    10f9:	74 0d                	je     1108 <__do_global_dtors_aux+0x28>
    10fb:	48 8b 3d 26 2f 00 00 	mov    0x2f26(%rip),%rdi        # 4028 <__dso_handle>
    1102:	ff 15 f0 2e 00 00    	call   *0x2ef0(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1108:	e8 63 ff ff ff       	call   1070 <deregister_tm_clones>
    110d:	c6 05 1c 2f 00 00 01 	movb   $0x1,0x2f1c(%rip)        # 4030 <__TMC_END__>
    1114:	5d                   	pop    %rbp
    1115:	c3                   	ret    
    1116:	66 2e 0f 1f 84 00 00 00 00 00 	cs nopw 0x0(%rax,%rax,1)
    1120:	c3                   	ret    
    1121:	66 66 2e 0f 1f 84 00 00 00 00 00 	data16 cs nopw 0x0(%rax,%rax,1)
    112c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001130 <frame_dummy>:
frame_dummy():
    1130:	f3 0f 1e fa          	endbr64 
    1134:	e9 67 ff ff ff       	jmp    10a0 <register_tm_clones>

0000000000001139 <raise>:
raise():
/home/briq/work/tmp/archive_ld/main.c:12

/* void _start(void) */
/* {} */

void raise(void)
{}
    1139:	55                   	push   %rbp
    113a:	48 89 e5             	mov    %rsp,%rbp
    113d:	90                   	nop
    113e:	5d                   	pop    %rbp
    113f:	c3                   	ret    

0000000000001140 <main>:
main():
/home/briq/work/tmp/archive_ld/main.c:15

void main(void)
{
    1140:	55                   	push   %rbp
    1141:	48 89 e5             	mov    %rsp,%rbp
    1144:	48 83 ec 10          	sub    $0x10,%rsp
/home/briq/work/tmp/archive_ld/main.c:16
    unsigned long long a = 124343;
    1148:	48 c7 45 f0 b7 e5 01 00 	movq   $0x1e5b7,-0x10(%rbp)
/home/briq/work/tmp/archive_ld/main.c:17
    unsigned long res = 0;
    1150:	48 c7 45 f8 00 00 00 00 	movq   $0x0,-0x8(%rbp)
/home/briq/work/tmp/archive_ld/main.c:22

    /* _liba(); */
    /* _libb(); */

    _libok();
    1158:	e8 47 00 00 00       	call   11a4 <_libok>
/home/briq/work/tmp/archive_ld/main.c:24

    res = a / 3;
    115d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1161:	48 ba ab aa aa aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rdx
    116b:	48 f7 e2             	mul    %rdx
    116e:	48 89 d0             	mov    %rdx,%rax
    1171:	48 d1 e8             	shr    %rax
    1174:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
/home/briq/work/tmp/archive_ld/main.c:25 (discriminator 1)
    while(1);
    1178:	eb fe                	jmp    1178 <main+0x38>

000000000000117a <_libd>:
_libd():
    117a:	55                   	push   %rbp
    117b:	48 89 e5             	mov    %rsp,%rbp
    117e:	ba 05 00 00 00       	mov    $0x5,%edx
    1183:	48 8d 05 82 0e 00 00 	lea    0xe82(%rip),%rax        # 200c <__FUNCTION__.1>
    118a:	48 89 c6             	mov    %rax,%rsi
    118d:	48 8d 05 70 0e 00 00 	lea    0xe70(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    1194:	48 89 c7             	mov    %rax,%rdi
    1197:	b8 00 00 00 00       	mov    $0x0,%eax
    119c:	e8 8f fe ff ff       	call   1030 <printf@plt>
    11a1:	90                   	nop
    11a2:	5d                   	pop    %rbp
    11a3:	c3                   	ret    

00000000000011a4 <_libok>:
_libok():
    11a4:	55                   	push   %rbp
    11a5:	48 89 e5             	mov    %rsp,%rbp
    11a8:	e8 26 00 00 00       	call   11d3 <_liba>
    11ad:	ba 0c 00 00 00       	mov    $0xc,%edx
    11b2:	48 8d 05 59 0e 00 00 	lea    0xe59(%rip),%rax        # 2012 <__FUNCTION__.0>
    11b9:	48 89 c6             	mov    %rax,%rsi
    11bc:	48 8d 05 41 0e 00 00 	lea    0xe41(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    11c3:	48 89 c7             	mov    %rax,%rdi
    11c6:	b8 00 00 00 00       	mov    $0x0,%eax
    11cb:	e8 60 fe ff ff       	call   1030 <printf@plt>
    11d0:	90                   	nop
    11d1:	5d                   	pop    %rbp
    11d2:	c3                   	ret    

00000000000011d3 <_liba>:
_liba():
    11d3:	55                   	push   %rbp
    11d4:	48 89 e5             	mov    %rsp,%rbp
    11d7:	ba 05 00 00 00       	mov    $0x5,%edx
    11dc:	48 8d 05 3e 0e 00 00 	lea    0xe3e(%rip),%rax        # 2021 <__FUNCTION__.0>
    11e3:	48 89 c6             	mov    %rax,%rsi
    11e6:	48 8d 05 2c 0e 00 00 	lea    0xe2c(%rip),%rax        # 2019 <__FUNCTION__.0+0x7>
    11ed:	48 89 c7             	mov    %rax,%rdi
    11f0:	b8 00 00 00 00       	mov    $0x0,%eax
    11f5:	e8 36 fe ff ff       	call   1030 <printf@plt>
    11fa:	90                   	nop
    11fb:	5d                   	pop    %rbp
    11fc:	c3                   	ret    

Disassembly of section .fini:

0000000000001200 <_fini>:
_fini():
    1200:	f3 0f 1e fa          	endbr64 
    1204:	48 83 ec 08          	sub    $0x8,%rsp
    1208:	48 83 c4 08          	add    $0x8,%rsp
    120c:	c3                   	ret    
